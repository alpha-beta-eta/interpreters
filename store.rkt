#lang racket
(provide make-store)
(define (make-store size)
  (define store (make-vector size))
  (define next-loc 0)
  (define (newref val)
    (if (= next-loc size)
        (error 'newref "no space for allocation")
        (let ((loc next-loc))
          (vector-set! store loc val)
          (set! next-loc (+ next-loc 1))
          `(ref ,loc))))
  (define (deref ref)
    (define loc
      (if (eq? (car ref) 'ref)
          (cadr ref)
          (error 'deref "~s is not a reference" ref)))
    (vector-ref store loc))
  (define (setref ref val)
    (define loc
      (if (eq? (car ref) 'ref)
          (cadr ref)
          (error 'setref "~s is not a reference" ref)))
    (vector-set! store loc val))
  (lambda (msg . arg*)
    (case msg
      ((newref) (apply newref arg*))
      ((deref) (apply deref arg*))
      ((setref) (apply setref arg*)))))